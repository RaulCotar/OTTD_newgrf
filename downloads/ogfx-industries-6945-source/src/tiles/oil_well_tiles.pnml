/*
 * This file is part of the OpenGFX+ Industries NewGRF.
 * OpenGFX+ Industries is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version 2 or - upon your discretion - any later version.
 * OpenGFX+ Industries is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenGFX+ Industries. If not, see <http://www.gnu.org/licenses/>.
 */

/* Oil wells */

spriteset(oilwell_ground_overlay, "src/gfx/oil_wells/oil_wells.png") {
	tmpl_level_ground(7,9)
}

spritelayout oil_wells_tile_construction {
	ground { sprite: GROUNDSPRITE_CLEARED; }
}

GROUND_AWARE_SPRITELAYOUT(oil_wells_tile(sprite_offset))
	GROUND_SPRITE_OVERLAY(oilwell_ground_overlay)
	CONDITIONAL_BUILDING_SPRITE(2174 + sprite_offset, 32, 1)
SPRITELAYOUT_END

/* We use animation frames 1..10 for the continued animation as a loop
 * frames 11 .. 20 are the same animation frames, but animation will stop at frame 11
 * this is needed so the last cycle can be finished gracefully
 */
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_animation, animation_frame) {
	2:  oil_wells_tile(1);
	3:  oil_wells_tile(2);
	4:  oil_wells_tile(3);
	5:  oil_wells_tile(4);
	6:  oil_wells_tile(5);
	7:  oil_wells_tile(4);
	8:  oil_wells_tile(3);
	9:  oil_wells_tile(2);
	10: oil_wells_tile(1);
	12: oil_wells_tile(1);
	13: oil_wells_tile(2);
	14: oil_wells_tile(3);
	15: oil_wells_tile(4);
	16: oil_wells_tile(5);
	17: oil_wells_tile(4);
	18: oil_wells_tile(3);
	19: oil_wells_tile(2);
	20: oil_wells_tile(1);
	oil_wells_tile(0);
}


switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_stop_anim, animation_frame) {
	1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
	2: return 12;
	3: return 13;
	4: return 14;
	5: return 15;
	6: return 16;
	7: return 17;
	8: return 18;
	9: return 19;
	10: return 20;
	return CB_RESULT_DO_NOTHING;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_start_anim, animation_frame) {
	11: return 1;
	12: return 2;
	13: return 3;
	14: return 4;
	15: return 5;
	16: return 6;
	17: return 7;
	18: return 8;
	19: return 9;
	20: return 10;
	return CB_RESULT_START_ANIMATION;
}
random_switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_random_anim_trigger_switch, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
	1: return oil_wells_tile_1_stop_anim;
	1: return oil_wells_tile_1_start_anim;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_next_frame_switch, animation_frame) {
	10: return 1;
	11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over. // CB_RESULT_STOP_ANIMATION
	20: return 11;
	return CB_RESULT_NEXT_FRAME;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_graphics_switch, construction_state) {
	0: oil_wells_tile_construction;
	1: oil_wells_tile(0);
	2: oil_wells_tile(0);
	oil_wells_tile_animation;
}

item(FEAT_INDUSTRYTILES, oil_wells_tile_1) {
	property {
		substitute:         0x1D;
		override:           0x1D;
		animation_info:     [ANIMATION_LOOPING, 20];
		animation_speed:    3;
		animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
		special_flags:      bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
	}
	graphics {
		anim_control: oil_wells_tile_1_random_anim_trigger_switch;
		anim_next_frame: oil_wells_tile_1_next_frame_switch;
		random_trigger: oil_wells_tile_1_random_anim_trigger_switch;
		oil_wells_tile_1_graphics_switch;
	}
}
