/*
 * This file is part of OpenGFX+ Trains.
 * OpenGFX+ Trains is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenGFX+ Trains is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenGFX+ Trains. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * =============================================================================
 * Generic Blender Model Templates
 * Version 2
 * 2012-05-31
 * Xotic750
 * This release may be used under the terms of the license: GPLv2
 * http://www.gnu.org/licenses/gpl-2.0.html
 * =============================================================================
 */

/* OpenGFX+ */
/* Define the 8bpp sprite template */
template template_train_opengfxp8(z, m, g) {
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-26 * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0001_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-30 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0002_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-27 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0003_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-22 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0004_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-26 * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0005_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-30 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0006_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-27 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0007_in" + g + "x.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-22 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0008_in" + g + "x.png")]
}

/* OpenGFX+ */
/* Define the gui sprite template for the 8bpp GUI menus */
template template_train_gui_opengfxp8(m) {
    []
    []
    [0, 0, 45, 31, -27, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0003_8_in1x.png")]
    []
    []
    []
    [0, 0, 45, 31, -27, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0007_8_in1x.png")]
    []
}

/* OpenGFX+ */
/* Define the 32bpp sprite template */
template template_train_opengfxp32(z, m, g) {
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-26 * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0001_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0001_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-30 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0002_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0002_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-27 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0003_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0003_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-22 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0004_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0004_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-26 * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0005_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0005_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-30 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0006_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0006_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-27 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0007_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0007_in" + g + "xm.png")]
    [0, 0, (180 / (4 / z)), (124 / (4 / z)), (-22 * z), (-16 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0008_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0008_in" + g + "xm.png")]
}

/* OpenGFX+ */
/* Define the gui sprite template for the 32bpp GUI menus */
template template_train_gui_opengfxp32(m) {
    []
    []
    [0, 0, 45, 31, -27, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0003_32_in1x.png"), ("src/gfx/rendered/" + m + "/gui/0003_32_in1xm.png")]
    []
    []
    []
    [0, 0, 45, 31, -27, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0007_32_in1x.png"), ("src/gfx/rendered/" + m + "/gui/0007_32_in1xm.png")]
    []
}

/* Define the 8bpp short sprite template */
template template_short_train_opengfxp8(z, m, g) {
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-17 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0001_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0002_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-7  * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0003_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-6  * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0004_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-11 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0005_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-22 * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0006_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-23 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0007_in" + g + "x.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/8bpp/0008_in" + g + "x.png")]
}

/* OpenGFX+ */
/* Define the short gui sprite template for the 8bpp GUI menus */
template template_short_train_gui_opengfxp8(m) {
    []
    []
    [12, 0, 24, 31, -23, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0003_8_in1x.png")]
    []
    []
    []
    [12, 0, 24, 31, -23, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0007_8_in1x.png")]
    []
}

/* Define the 32bpp short sprite template */
template template_short_train_opengfxp32(z, m, g) {
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-17 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0001_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0001_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0002_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0002_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-7  * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0003_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0003_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-6  * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0004_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0004_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-11 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0005_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0005_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-22 * z), (-14 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0006_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0006_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-23 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0007_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0007_in" + g + "xm.png")]
    [(48 / (4 / z)), 0, (96 / (4 / z)), (124 / (4 / z)), (-14 * z), (-18 * z), CROP, ("src/gfx/rendered/" + m + "/32bpp/0008_in" + g + "x.png"), ("src/gfx/rendered/" + m + "/32bpp_mask/0008_in" + g + "xm.png")]
}

/* OpenGFX+ */
/* Define the short gui sprite template for the 32bpp GUI menus */
template template_short_train_gui_opengfxp32(m) {
    []
    []
    [12, 0, 24, 31, -23, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0003_32_in1x.png"), ("src/gfx/rendered/" + m + "/gui/0003_32_in1xm.png")]
    []
    []
    []
    [12, 0, 24, 31, -23, -18, CROP, ("src/gfx/rendered/" + m + "/gui/0007_32_in1x.png"), ("src/gfx/rendered/" + m + "/gui/0007_32_in1xm.png")]
    []
}
